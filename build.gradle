plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.1'

    // Used by release.gradle
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.30.0'
}

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

group 'nl.martijndwars'
version '5.1.2-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    // For CLI
    implementation group: 'com.beust', name: 'jcommander', version: '1.81'

    // For making HTTP requests
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.12.0'

    // For cryptographic operations
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.77'

    // For creating and signing JWT
    implementation group: 'org.bitbucket.b_c', name: 'jose4j', version: '0.9.5'

    // For parsing JSON
    testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'

    // For testing, obviously
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.1'

    // For running JUnit tests
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.1'

    // For turning InputStream to String
    testImplementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

    // For reading the demo vapid keypair from a pem file
    testImplementation group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: '1.77'

    // For verifying Base64Encoder results in unit tests
    testImplementation group: 'com.google.guava', name: 'guava', version: '33.0.0-jre'
}

wrapper {
    gradleVersion = '7.6'
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_17
}

mainClassName = 'nl.martijndwars.webpush.cli.Cli'

run {
    classpath configurations.shadow.files
}

test {
    useJUnitPlatform()

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
        showStandardStreams true
        exceptionFormat 'full'
    }

    exclude '**/SeleniumTests.class'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

if (hasProperty('release')) {
    apply from: 'release.gradle'
}
